generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId   Int       @id @default(autoincrement())
  username String
  email    String    @unique
  password String
  Review   Review[]
  Comment  Comment[]
  Image    Image[]
}

model Admin {
  adminId  Int       @id @default(autoincrement())
  username String
  email    String    @unique
  password String
  Comment  Comment[]
  Image    Image[]
}

model Review {
  reviewId               Int      @id @default(autoincrement())
  userId                 Int
  // ###### we will create a review using only the below three pieces of data
  address                String  
  detailedAddress        String
  residenceYear          String
  // #######
  sigungu                String?
  comprehensiveOpinion   String?
  residenceProofDocument String?
  rating                 Float?
  usageFee               Float?
  reviewEvaluationItems  Json?  // {
                                // "reviewItems": [ 
                                // {selectedScore: Int, detailedDescription: String, items: [{  }, { }, { } ] }, 
                                // {selectedScore: Int, detailedDescription: String, items: [{  }, { }, { } ] }, 
                                // {selectedScore: Int, detailedDescription: String, items: [{  }, { }, { } ] }, 
                                // {selectedScore: Int, detailedDescription: String, items: [{  }, { }, { } ] }, 
                                //              ]
                                // }
  viewCount              Int      @default(0)
  status                 Status   @default(DRAFT)
  isExposed              Boolean  @default(true)
  registrationDate       DateTime @default(now())

  User           User?            @relation(fields: [userId], references: [userId])
  Comment        Comment[]
  Image          Image[]
}

model Image {
  imageId     Int      @id @default(autoincrement())
  reviewId    Int
  userId      Int
  adminId     Int? 
  imageUrl    String
  isExposed   Boolean   @default(true)
  processedAt DateTime  @default(now())
 
  review      Review?   @relation(fields: [reviewId], references: [reviewId])
  user        User     @relation(fields: [userId], references: [userId])
  admin       Admin?   @relation(fields: [adminId], references: [adminId])
}

model Comment {
  commentId        Int       @id @default(autoincrement())
  reviewId         Int
  userId           Int
  adminId          Int?
  comment          String
  commentDate      DateTime  @default(now())
  isExposed        Boolean   @default(true)
  adminProcessedAt DateTime?
  updatedAt        DateTime  @updatedAt
  review           Review    @relation(fields: [reviewId], references: [reviewId], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  admin            Admin?    @relation(fields: [adminId], references: [adminId], onDelete: SetNull)
}

model EvaluationItem {
  itemId       Int     @id @default(autoincrement())
  reviewId     Int
  displayOrder Int
  questionText String
  score0Text   String
  score1Text   String
  score3Text   String
  score5Text   String
  selectedScore Int? 
  price        Float
}

enum Status {
  DRAFT
  WAITING
  APPROVED
  REJECTED
  WAITING_FOR_UPDATE
  WAITING_FOR_RESIDENCE_VERIFICATION
  WAITING_AFTER_REJECTION
}


// evaluationItems   {selectedScore: Int,
                  // detailedDescription: String, 
                  // evaluationItem: EvaluationItem }[]                  