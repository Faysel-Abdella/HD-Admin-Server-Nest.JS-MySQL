generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  user_id  Int       @id @default(autoincrement())
  username String
  email    String    @unique
  password String
  Review   Review[]
  Comment  Comment[]
}

model Admin {
  admin_id Int       @id @default(autoincrement())
  username String
  email    String    @unique
  password String
  Comment  Comment[]
}

model Review {
  review_id                Int      @id @default(autoincrement())
  user_id                  Int
  address                  String
  sigungu                  String
  detailed_address         String?
  residence_year           String?
  comprehensive_opinion    String?
  photos                   Json?
  residence_proof_document String?
  rating                   Float
  usage_fee                Float
  view_count               Int      @default(0)
  status                   Status   @default(DRAFT)
  is_exposed               Boolean  @default(true)
  registration_date        DateTime @default(now())
  // evaluation_item          EvaluationItem[]
 
  User           User?            @relation(fields: [userUser_id], references: [user_id])
  userUser_id    Int?
  Comment        Comment[]
  EvaluationItem EvaluationItem[]
}

model Comment {
  comment_id         Int       @id @default(autoincrement())
  review_id          Int
  user_id            Int
  admin_id           Int?
  comment            String
  comment_date       DateTime  @default(now())
  is_exposed         Boolean   @default(true)
  admin_processed_at DateTime?
  updated_at         DateTime  @updatedAt
  review             Review    @relation(fields: [review_id], references: [review_id], onDelete: Cascade)
  user               User      @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  admin              Admin?    @relation(fields: [admin_id], references: [admin_id], onDelete: SetNull)
}


model EvaluationItem {
  item_id       Int     @id @default(autoincrement())
  review_id     Int
  display_order Int
  question_text String
  score_0_text  String
  score_1_text  String
  score_3_text  String
  score_5_text  String
  price         Float
  review        Review? @relation(fields: [review_id], references: [review_id], onDelete: Cascade)
}

enum Status {
  DRAFT
  WAITING
  APPROVED
  REJECTED
  WAITING_FOR_UPDATE
  WAITING_FOR_RESIDENCE_VERIFICATION
  WAITING_AFTER_REJECTION
}
